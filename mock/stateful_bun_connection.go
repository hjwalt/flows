// Code generated by MockGen. DO NOT EDIT.
// Source: stateful_bun/connection.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	bun "github.com/uptrace/bun"
)

// MockBunConnection is a mock of BunConnection interface.
type MockBunConnection struct {
	ctrl     *gomock.Controller
	recorder *MockBunConnectionMockRecorder
}

// MockBunConnectionMockRecorder is the mock recorder for MockBunConnection.
type MockBunConnectionMockRecorder struct {
	mock *MockBunConnection
}

// NewMockBunConnection creates a new mock instance.
func NewMockBunConnection(ctrl *gomock.Controller) *MockBunConnection {
	mock := &MockBunConnection{ctrl: ctrl}
	mock.recorder = &MockBunConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBunConnection) EXPECT() *MockBunConnectionMockRecorder {
	return m.recorder
}

// Db mocks base method.
func (m *MockBunConnection) Db() bun.IDB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Db")
	ret0, _ := ret[0].(bun.IDB)
	return ret0
}

// Db indicates an expected call of Db.
func (mr *MockBunConnectionMockRecorder) Db() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Db", reflect.TypeOf((*MockBunConnection)(nil).Db))
}

// Start mocks base method.
func (m *MockBunConnection) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockBunConnectionMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockBunConnection)(nil).Start))
}

// Stop mocks base method.
func (m *MockBunConnection) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockBunConnectionMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockBunConnection)(nil).Stop))
}
